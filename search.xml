<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript]]></title>
    <url>%2F2017%2F12%2F26%2FJavaScript%2F</url>
    <content type="text"><![CDATA[1. 第一章 作用域作用域 一般语言的作用域生成过程：分词/词法分析、解析/语法分析、代码生成 编译器要生成一个树，还要询问作用域是否已经存在该变量，没有就生成；还要为引擎生成运行代码，这时引擎就要找这个变量了，有的话就用，没有就继续查找；（首先编译器会在当前作用域中声明之前没有声明的变量，然后引擎在作用域中查找该变量，能找到就对它进行赋值） 1.1. 异常ReferenceError同作用域判断失败相关，TypeError代表作用域判断成功了，但是对结果的操作是非法的或是不合理的； 如果查找的目标是对变量进行赋值，就会使用LHS查询；如果目标是获得变量的是，就会进行RHS查询。 1.2. 欺骗词法（因为它们在运行时候修改或者创建了新的作用域，欺骗其他在书写时定义的词法作用域）第一种机制：eval(string)，通常被用来执行动态创建的代码；但是在严格模式上，eval在运行的时候会有自己的词法作用域，就无法修改所在的作用域 ； 123456function foo(str, a) &#123;eval( str ); // 欺骗！console.log( a, b );&#125;var b = 2;foo( &quot;var b = 3;&quot;, 1 ); // 1, 3 第二种机制：with,实际上是根据传递给它的对象凭空创建了一个全新的词法作用域； 2. 第三章 函数作用域和块作用域2.1. 3.1 函数中的作用域这个函数的全部变量都可以在整个函数的范围内使用及复用。 2.2. 3.2 隐藏内部实现1.全局命名空间 2.模块管理 2.3. 3.3 函数作用域函数声明和函数表达式之间最重要的区别就是它们的名称标识符将会绑定在何处； 函数声明就是function a（）{….} 函数表达式是(function a(){….}) 2.3.1. 2.3.2. 3.3.1 匿名和具名匿名函数的缺点: 1.匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难； 2.没有函数名的话，函数只能通过使用已经过期的arguments.callee引用自身； 3.省略了原先具有可理解性的函数名； 解决：通过行内函数表达式，始终给函数表达式命名就行了； 2.3.3. 3.3.2 立即执行函数表达式（IIFE）(function a(){….}) ()，就是后面的两个括号； 或者(function a(){…} ()) 它的进阶用法就是把它们当做函数调用并传递参数进去，例如： 1234567var a = 2;(function IIFE( global ) &#123;var a = 3;console.log( a ); // 3console.log( global.a ); // 2&#125;)( window );console.log( a ); // 2 第二个应用场景是解决undefined标识符的默认值被错误覆盖导致的异常 1234567undefined = true; // 给其他代码挖了一个大坑！ 绝对不要这样做！(function IIFE( undefined ) &#123;var a;if (a === undefined) &#123;console.log( &quot;Undefined is safe here!&quot; );&#125;&#125;)(); 第三个应用场景就是倒置代码运行的顺序。将需要运行的函数放在第二位； 1234567(function IIFE( def ) &#123;def( window );&#125;)(function def( global ) &#123;var a = 3;console.log( a ); // 3console.log( global.a ); // 2&#125;); 2.3.1. 3.4 块作用域这是用来对之前的最小授权原则进行扩展的工具，将代码从函数中隐藏的信息扩展为在块中隐藏的信息； 2.3.1.1. 3.4.1 with用with从对象中创建出的作用域仅在with声明中而非外部作用域中有效； 3.4.2 try/catch 会创建一个块作用域，其中声明的变量仅在catch内部有效； 3.4.3 let 为其声明的变量隐式其所在的块作用域； 为块作用域显式地创建块可以解决因为隐式而带来的混乱问题；用{….}为let创建一个用于绑定的块； 2.4.1. 用处:2.4.1.1. 1.垃圾收集有关于闭包及回收内存垃圾的回收机制 2.4.1.2. 2.let循环用let声明附属于一个新的作用域而不是当前的函数作用域，也不属于全局作用域 2.4.1.3. 3.const同样可以用来创建块作用域变量而且不可变。 3.4.1. 第四章 提升3.5.1. 4.2 编译器再度来袭var a = 2; 这句话其实有两个声明，一个是var a，定义声明在编译阶段进行的（编译）； a = 2，赋值声明会被留在原地等待（执行）； 先有声明才有赋值； 只有声明本身才会被提升，而赋值或其他运行逻辑会留在原地即函数表达式不会被提升； 3.6.1. 4.3 函数优先函数声明和变量声明都会被提升，但是函数首先会被提升，然后才是变量； 4.1. 第五章 闭包5.2 实质问题 当函数可以记住并访问所在的词法作用域的时候，就产生了闭包，及时函数是在当前词法作用域之外执行； 123456789fuction foo()&#123; var a = 2; function bar ()&#123; console.log(a); &#125; return bar;&#125;var baz= foo();baz();//2 5.1. 第二部分5.1.1. this小结按照顺序，应用这四条规则来判断this的绑定对象： 由 new 调用？ 绑定到新创建的对象。 由 call 或者 apply（或者 bind） 调用？ 绑定到指定的对象。 由上下文对象调用？ 绑定到那个上下文对象。 默认： 在严格模式下绑定到 undefined， 否则绑定到全局对象 。]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>IT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[express]]></title>
    <url>%2F2017%2F12%2F25%2Fexpress%2F</url>
    <content type="text"><![CDATA[1. 起步1.1. 什么是express基于 Node.js 平台，快速、开放、极简的 web 开发框架。 1.2. express的安装1.2.1. 步骤 ​ 1C:\Users\Administrator&gt;npm install -g express-generator 2.切入目录到项目中去 1E:\APP\Demo&gt;express -e service //基于ejs创建了服务端的文件 3.进入服务端的项目，执行npm install 1E:\APP\Demo&gt;service&gt;npm install //会发现多了node_modules 4.npm start后，浏览器输入local:3000 (默认3000端口) 1.2.2. 解惑1.为什么要通过npm start启动？ 因为在package.json文件中有这么一段代码，提到了www文件 下面是www文件 1.3. 数据读取接口 node提供服务只需要res.send()返回数据就行了 下面是通过自己定义的路径访问成功的数据实例 优化后的 1.4. 数据存储接口1.读取原始数据 最后在浏览器输入 1http://localhost:3000/data/write/type=it&amp;title=111&amp;url=xxx.com&amp;images=xxx.png 1.5. 后台系统开发详解1.在app.js里面引入express-session，作为登录的中间件 1var session = require(&apos;express-session&apos;); //express-session 再在下面定义 12345app.use(session(&#123; secret: &apos;#sddjswjdhww22ygfw2233@@@%#$!@%Q!%*12&apos;, resave: false, saveUninitialized: true&#125;)); //express-session 2.定制路由 主页是什么路由，登录页是渲染到哪一个页面 123456router.get(&apos;/&apos;, function(req, res, next) &#123; if(!req.session.user)&#123; return res.render(&apos;login&apos;, &#123;&#125;); &#125; //如果没有字段的话，就会渲染login页面 res.render(&apos;index&apos;, &#123;&#125;);&#125;); 3.完善前端页面，在view中]]></content>
      <categories>
        <category>后台技术</category>
      </categories>
      <tags>
        <tag>IT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[支付宝小程序]]></title>
    <url>%2F2017%2F12%2F21%2F%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[1. 概述 App代表顶层应用，管理所有页面和全局数据。同时也是一个构造方法，生成的App实例就是小程序； app.js:应用逻辑​ app.acss:应用样式（可选）​ app.json:应用配置 app.js提供四个事件，可以设置钩子方法onLaunch:小程序启动；onShow:小程序切换到前台onHide:小程序切换到后台onError:小程序出错 onLaunch/onShow方法的参数:query(object) path(string)getApp()，可以获取到小程序实例，一般在各个子页面中获取顶层使用 var app = getApp()s全局的数据可以在App()中设置各个子页面通过全局函数getApp()可以获取全局的应用实例app.json用于全局配置，决定页面文件的路径(pages)、窗口表现(window)、设置网络超时时间、设置多tab等pages属性是一个数组，每一项都是字符串，页面后面可以不加后缀window属性用于设置小程序通用的状态栏、导航条、标题、窗口背景色； 1.1. 视图层(.axml)定义了页面的标签解构 1.1.1. 数据绑定 1.1.2. 列表渲染 1.1.2.1. 1.1.3. 条件渲染 ​ 1.1.3.1. a:if是一个控制属性 a:if=”“ 1.1.3.2. block a:if 不是一个组件仅仅是一个包装原元素 1.1.4. 模板 1.1.5. 事件 1.1.6.]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>IT</tag>
      </tags>
  </entry>
</search>
